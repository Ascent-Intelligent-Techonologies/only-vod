# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vod_api_pb2 as vod__api__pb2


class VODServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartVOD = channel.unary_unary(
                '/VODService.VODService/StartVOD',
                request_serializer=vod__api__pb2.VODStartMessage.SerializeToString,
                response_deserializer=vod__api__pb2.VODStartResponse.FromString,
                )
        self.StopVOD = channel.unary_unary(
                '/VODService.VODService/StopVOD',
                request_serializer=vod__api__pb2.VODStopMessage.SerializeToString,
                response_deserializer=vod__api__pb2.VODStopResponse.FromString,
                )
        self.CheckVODStatus = channel.unary_unary(
                '/VODService.VODService/CheckVODStatus',
                request_serializer=vod__api__pb2.VODStatusMessage.SerializeToString,
                response_deserializer=vod__api__pb2.VODStatusResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/VODService.VODService/HealthCheck',
                request_serializer=vod__api__pb2.HealthCheckMessage.SerializeToString,
                response_deserializer=vod__api__pb2.HealthCheckResult.FromString,
                )


class VODServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartVOD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopVOD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckVODStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VODServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartVOD': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVOD,
                    request_deserializer=vod__api__pb2.VODStartMessage.FromString,
                    response_serializer=vod__api__pb2.VODStartResponse.SerializeToString,
            ),
            'StopVOD': grpc.unary_unary_rpc_method_handler(
                    servicer.StopVOD,
                    request_deserializer=vod__api__pb2.VODStopMessage.FromString,
                    response_serializer=vod__api__pb2.VODStopResponse.SerializeToString,
            ),
            'CheckVODStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckVODStatus,
                    request_deserializer=vod__api__pb2.VODStatusMessage.FromString,
                    response_serializer=vod__api__pb2.VODStatusResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=vod__api__pb2.HealthCheckMessage.FromString,
                    response_serializer=vod__api__pb2.HealthCheckResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VODService.VODService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VODService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartVOD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VODService.VODService/StartVOD',
            vod__api__pb2.VODStartMessage.SerializeToString,
            vod__api__pb2.VODStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopVOD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VODService.VODService/StopVOD',
            vod__api__pb2.VODStopMessage.SerializeToString,
            vod__api__pb2.VODStopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckVODStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VODService.VODService/CheckVODStatus',
            vod__api__pb2.VODStatusMessage.SerializeToString,
            vod__api__pb2.VODStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VODService.VODService/HealthCheck',
            vod__api__pb2.HealthCheckMessage.SerializeToString,
            vod__api__pb2.HealthCheckResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
